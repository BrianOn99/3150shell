!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
CMD_BUF_SIZE	main.c	9;"	d	file:
MAX_CMD_LEN	parser.h	4;"	d
PARSE_H	parser.h	2;"	d
TOKEN_ARRAY_SIZE	parser.c	4;"	d	file:
bn_cd	interpreter.c	/^int bn_cd(char* cmdargv[])$/;"	f
classify	interpreter.c	/^char *classify(char *given_cmdname)$/;"	f
cmd	parser.h	/^        char **cmd;$/;"	m	struct:parsetree
cmd_len	parser.h	/^        int cmd_len;$/;"	m	struct:parsetree
cmdfunction	interpreter.h	/^        int (*cmdfunction)(char**);$/;"	m	struct:cmdmapping
cmdmapping	interpreter.h	/^struct cmdmapping {$/;"	s
cmdname	interpreter.h	/^        char *cmdname;$/;"	m	struct:cmdmapping
getcmdline	main.c	/^void getcmdline(char *buffer, size_t size)$/;"	f
initialize	main.c	/^void initialize()$/;"	f
interpreter	interpreter.c	/^void interpreter(struct parsetree cmd_info)$/;"	f
main	main.c	/^void main(void)$/;"	f
main	test.c	/^void main(void)$/;"	f
mainloop	main.c	/^void mainloop()$/;"	f
parser	parser.c	/^void parser(char cmdline[], struct parsetree *cmd_info)$/;"	f
parsetree	parser.h	/^struct parsetree {$/;"	s
token_array	parser.c	/^static char *token_array[TOKEN_ARRAY_SIZE];$/;"	v	file:
tokenize	parser.c	/^int tokenize(char cmdline[], char *token_store[])$/;"	f
