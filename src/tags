!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
CMD_BUF_SIZE	main.c	13;"	d	file:
CMD_LIST_LEN	parser.h	5;"	d
MAX_CMD_LEN	parser.h	4;"	d
PARSE_H	parser.h	2;"	d
TOKEN_ARRAY_SIZE	parser.c	5;"	d	file:
_GNU_SOURCE	main.c	1;"	d	file:
bn_cd	interpreter.c	/^int bn_cd(char* cmdargv[])$/;"	f
bn_cmdmap	interpreter.c	/^static struct cmdmapping bn_cmdmap[] =$/;"	v	typeref:struct:cmdmapping	file:
bn_exit	interpreter.c	/^int bn_exit(char* cmdargv[])$/;"	f
bn_fg	interpreter.c	/^int bn_fg(char* cmdargv[])$/;"	f
bn_jobs	interpreter.c	/^int bn_jobs(char* cmdargv[])$/;"	f
buildtree	parser.c	/^int buildtree(char **tokens, char **list[], int *count)$/;"	f
builtin	interpreter.c	/^enum cmd_type { builtin, external };$/;"	e	enum:cmd_type	file:
check_cmdlen	interpreter.c	/^int check_cmdlen(char* cmdargv[], int len, const char *cmdname)$/;"	f
classify	interpreter.c	/^enum cmd_type classify(char *given_cmdname, cmd_evaluater *backeval)$/;"	f
cmd_evaluater	interpreter.h	/^typedef int (*cmd_evaluater)(char**);$/;"	t
cmd_type	interpreter.c	/^enum cmd_type { builtin, external };$/;"	g	file:
cmdfunction	interpreter.h	/^        cmd_evaluater cmdfunction;$/;"	m	struct:cmdmapping
cmdlen	interpreter.c	/^int cmdlen(char** cmdargv)$/;"	f
cmdmapping	interpreter.h	/^struct cmdmapping {$/;"	s
cmdname	interpreter.h	/^        char *cmdname;$/;"	m	struct:cmdmapping
cmdtok	parser.c	/^int cmdtok(char ***tokens_ptr, char ***target)$/;"	f
count	parser.h	/^        int count;$/;"	m	struct:parsetree
entries	interpreter.h	/^        TAILQ_ENTRY(job) entries;$/;"	m	struct:job
external	interpreter.c	/^enum cmd_type { builtin, external };$/;"	e	enum:cmd_type	file:
free_parsetree_content	parser.c	/^void free_parsetree_content(struct parsetree *cmd_info)$/;"	f
getcmdline	main.c	/^void getcmdline(char *buffer, size_t size)$/;"	f
in	interpreter.c	/^        int in;$/;"	m	struct:iofd	file:
initialize	main.c	/^void initialize()$/;"	f
interpreter	interpreter.c	/^int interpreter(struct parsetree *cmd_info)$/;"	f
invalid_argchar	parser.c	/^char invalid_argchar[256] = {['\\t'] = 1, ['<'] = 1, ['>'] = 1, ['|'] = 1,$/;"	v
invalid_input	parser.c	/^void invalid_input()$/;"	f
iofd	interpreter.c	/^struct iofd {$/;"	s	file:
is_argchar	parser.c	7;"	d	file:
is_seperator	parser.c	/^int is_seperator(char *token)$/;"	f
job	interpreter.h	/^struct job {$/;"	s
job_queue_init	interpreter.c	/^void job_queue_init()$/;"	f
list	parser.h	/^        char **list[CMD_LIST_LEN];$/;"	m	struct:parsetree
main	main.c	/^void main(void)$/;"	f
main	test.c	/^void main(void)$/;"	f
mainloop	main.c	/^void mainloop()$/;"	f
modline	parser.h	/^        char *modline;$/;"	m	struct:parsetree
out	interpreter.c	/^        int out;$/;"	m	struct:iofd	file:
parser	parser.c	/^int parser(const char *cmdline, struct parsetree *cmd_info)$/;"	f
parsetree	parser.h	/^struct parsetree {$/;"	s
pgid	interpreter.h	/^        pid_t pgid;$/;"	m	struct:job
pr_prompt	main.c	/^void pr_prompt()$/;"	f
rawline	interpreter.h	/^        char *rawline;$/;"	m	struct:job
rawline	parser.h	/^        char *rawline;$/;"	m	struct:parsetree
run_builtin	interpreter.c	/^int run_builtin(char **cmd)$/;"	f
run_external	interpreter.c	/^int run_external(char* cmdargv[], struct iofd inoutfd, pid_t pgid)$/;"	f
set_ownpgrp	main.c	/^void set_ownpgrp()$/;"	f
setsig	setsig.c	/^void setsig(){$/;"	f
siglist	setsig.c	/^int siglist[] = {SIGINT, SIGTERM, SIGQUIT, SIGTSTP, SIGTTOU};$/;"	v
token_array	parser.h	/^        char **token_array;$/;"	m	struct:parsetree
tokenize	parser.c	/^int tokenize(char cmdline[], char *token_store[])$/;"	f
unsetsig	setsig.c	/^void unsetsig(){$/;"	f
valid_arg	parser.c	/^int valid_arg(char *token)$/;"	f
valid_cmdline	parser.c	/^int valid_cmdline(char **tokens)$/;"	f
valid_cmdname	parser.c	/^int valid_cmdname(char *token)$/;"	f
wait_foreground	main.c	/^void wait_foreground()$/;"	f
